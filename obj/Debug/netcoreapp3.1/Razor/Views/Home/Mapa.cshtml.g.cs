#pragma checksum "C:\Users\huelm\OneDrive\Escritorio\SensorData\Challenge\Challenge-SensorData\Views\Home\Mapa.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ab3a943d3b98442b7ab9d5eb6a0e92b759fc9d79"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Mapa), @"mvc.1.0.view", @"/Views/Home/Mapa.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\huelm\OneDrive\Escritorio\SensorData\Challenge\Challenge-SensorData\Views\_ViewImports.cshtml"
using Challenge;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\huelm\OneDrive\Escritorio\SensorData\Challenge\Challenge-SensorData\Views\_ViewImports.cshtml"
using Challenge.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ab3a943d3b98442b7ab9d5eb6a0e92b759fc9d79", @"/Views/Home/Mapa.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"da2bcb1f8c4c3b409f23e89cd4208be6cf9624f5", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Mapa : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"



<div id=""mapa"" class=""container "" data-animation=""true"">


    <div id=""map"" class=""map"">

        <div id=""popup"" class=""ol-popup"">
            <a href=""#"" id=""popup-closer"" class=""ol-popup-closer""></a>
            <div id=""popup-content""></div>

        </div>

    </div>
    <div class=""carousel-inner text-center"">
        <button id=""botonAlta"" type=""button"" class=""btn btn-primary btn-lg botonMarcador"">
            Mostrar Marcadores
        </button>
    </div>

</div>





");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/css/ol.css"" type=""text/css"">
        <style>
            .map {
                height: 400px;
                width: 100%;
            }
        </style>
        <script src=""https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js""></script>
        <script type=""text/javascript"">



            var map = new ol.Map({
                target: 'map',
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM()
                    })
                ],
                view: new ol.View({
                    center: ol.proj.fromLonLat([4.35247, 50.84673]),
                    maxZoom: 18,
                    zoom: 12
                })
            });


     //        var layer = new ol.layer.Vector({
     //source: new ol.source.Vector({
     //    features: [
     //        new ");
                WriteLiteral(@"ol.Feature({
     //            geometry: new ol.geom.Point(ol.proj.fromLonLat([4.35247, 50.84673]))
     //        })
     //                ]
     //            })
     //        });
     //        map.addLayer(layer);



            let latitud = 4.35247;
            let longitud = 50.84673;


            let marcador1 = new ol.Feature({
                name: ""chau"",
                geometry: new ol.geom.Point(
                    ol.proj.fromLonLat([latitud
                        ,longitud ])// En d칩nde se va a ubicar
                ),
            });



            let latitud2 = 4.35100;
            let longitud2 = 50.81500;


            let marcador2 = new ol.Feature({
                name: ""hola"",
                geometry: new ol.geom.Point(
                    ol.proj.fromLonLat([latitud2
                        , longitud2])// En d칩nde se va a ubicar
                ),
            });


            let latitud3 = 4.31100;
            let longitud3 = 50.85500;");
                WriteLiteral(@"


            let marcador3 = new ol.Feature({
                name: ""323"",
                geometry: new ol.geom.Point(
                    ol.proj.fromLonLat([latitud3
                        , longitud3])// En d칩nde se va a ubicar
                ),
            });



            // Agregamos icono
            marcador1.setStyle(new ol.style.Style({
                image: new ol.style.Icon({
                    src: """);
#nullable restore
#line 114 "C:\Users\huelm\OneDrive\Escritorio\SensorData\Challenge\Challenge-SensorData\Views\Home\Mapa.cshtml"
                     Write(Url.Content("~/img/img.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\" })\r\n            }));\r\n\r\n              marcador2.setStyle(new ol.style.Style({\r\n                image: new ol.style.Icon({\r\n                    src: \"");
#nullable restore
#line 119 "C:\Users\huelm\OneDrive\Escritorio\SensorData\Challenge\Challenge-SensorData\Views\Home\Mapa.cshtml"
                     Write(Url.Content("~/img/img.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\" })\r\n              }));\r\n\r\n             marcador3.setStyle(new ol.style.Style({\r\n                image: new ol.style.Icon({\r\n                    src: \"");
#nullable restore
#line 124 "C:\Users\huelm\OneDrive\Escritorio\SensorData\Challenge\Challenge-SensorData\Views\Home\Mapa.cshtml"
                     Write(Url.Content("~/img/img.png"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""" })
            }));

            // marcadores debe ser un arreglo
            const marcadores = []; // Arreglo para que se puedan agregar otros m치s tarde


            marcadores.push(marcador1);// Agregamos el marcador al arreglo
            marcadores.push(marcador2);
            marcadores.push(marcador3);


            let capa = new ol.layer.Vector({
                source: new ol.source.Vector({
                    features: marcadores, // A la capa le ponemos los marcadores
                }),
            });
            // Y agregamos la capa al mapa

           


            var element = document.getElementById('popup');



            var popup = new ol.Overlay({
                element: element,
                positioning: 'bottom-center',
                stopEvent: false,
                offset: [0, -50],
            });

            map.addOverlay(popup);

            // display popup on click
            map.on('click', function (evt) {
               ");
                WriteLiteral(@" // recardo el popover para limpiar los datos 
                $(element).popover('dispose');

                //acciones
                var feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {
                    return feature;
                });
                if (feature) {
                    
                  
                    var coordinates = feature.getGeometry().getCoordinates();
                    
                    popup.setPosition(coordinates);
                    
                    $(element).popover({
                        placement: 'top',
                        html: true,
                        content: ` Latitud ${coordinates[0]} <br/> Longitud ${coordinates[1]}`,

                    });
                    
                    console.log(element);
                    console.log(element);
                    $(element).popover('show');
                } else {
                    $(element).popover('dispose');
                }
 ");
                WriteLiteral("           });\r\n\r\n\r\n      \r\n\r\n            \r\n\r\n\r\n            $(document).on(\"click\", \".botonMarcador\", function () {\r\n                map.addLayer(capa);\r\n         \r\n            });\r\n\r\n        </script>\r\n    ");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
